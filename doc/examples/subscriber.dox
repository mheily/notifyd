/*
 * Copyright (c) 2015 Mark Heily <mark@heily.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <state.h>

int main(int argc, char *argv[]) 
{
	const char *name = "user.example.end_of_the_world_as_we_know_it";
	char *key, *value;
	size_t len;

	state_init(0, 0);
	state_subscribe(name);

	/* You can query the current state like this: */
	state_get(name, &value);

	/* Wait in a loop for notifications that the state has changed. */
	int event_fd = state_get_event_fd();
    for (;;) {
    	fd_set fds;
    	int result;
    	ssize_t len;
    	
		FD_ZERO(&fds);
		FD_SET(event_fd, &fds);
	    result = select(event_fd + 1, &fds, NULL, NULL, NULL);  	
	
	    len = state_check(&key, &value);
	    if (len > 0) {
	            printf("the new state of %s is: %s\n", key, value);
	    }
    }
}
